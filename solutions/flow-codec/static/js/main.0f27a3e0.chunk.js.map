{"version":3,"sources":["codec/Codec.tsx","components/Checkbox/index.tsx","components/Radiobox/index.tsx","codec/JsonCodec.tsx","codec/index.ts","codec/InputCodec.tsx","codec/OutputCodec.tsx","codec/HtmlCodec.tsx","codec/UrlComponentCodec.tsx","components/Node.tsx","components/NodeLib.tsx","components/Workflow.tsx","utils.ts","components/State.tsx","components/Head.tsx","App.tsx","index.tsx"],"names":["BaseDecodeType","Checkbox","label","value","onChange","className","type","checked","e","target","Radiobox","options","handleChange","event","map","item","key","name","ConfigUi","node","refresh","config","isLoop","ende","useCallback","val","call","Decode","DecodeType","Codec","id","generateNodeId","CodecType","JsonCodec","input","output","this","JSON","parse","Format","stringify","res","InputCodec","Input","OutputCodec","Output","HtmlCodec","div","document","createElement","innerHTML","innerText","textContent","appendChild","createTextNode","UrlComponentCodec","pre","decodeURIComponent","encodeURIComponent","CodecMap","Map","set","nanoid","Node","onClick","index","shouldClone","isActive","isDraggingForbidden","isForbiddenDragging","draggableId","isDragDisabled","provided","snapshot","ref","innerRef","data-id","draggableProps","dragHandleProps","style","isDragging","border","backgroundColor","borderStyle","LIBS","NodeLib","NodeStatusType","droppableId","isDropDisabled","droppableProps","placeholder","Workflow","onNodeFocus","workflow","refreshWorkflow","focusedNode","handleStart","i","length","run","err","message","handleFocusNode","find","getAttribute","isDraggingOver","State","useState","setTheKey","Math","random","Ui","data-type","readOnly","Head","get","initialNode","App","setFocusedNode","workflowNodeList","setWorkflowNodeList","onDragEnd","result","destination","source","libNodeType","codec","newNodeList","Array","from","splice","removed","ReactDOM","render","StrictMode","getElementById"],"mappings":"mLAKYA,E,yFCiBGC,EApBE,SAAC,GAQX,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,MACAC,EAKI,EALJA,SASA,OACE,2BAAOC,UAAU,kBACdH,EACD,2BAAOI,KAAK,WAAWC,QAASJ,EAAOC,SANtB,SAACI,GACpBJ,EAASI,EAAEC,OAAOF,cCuBPG,EAjCE,SAAC,GAUX,IATLR,EASI,EATJA,MACAC,EAQI,EARJA,MACAQ,EAOI,EAPJA,QACAP,EAMI,EANJA,SAOMQ,EAAe,SAACC,GACpBT,EAASS,EAAMJ,OAAON,QAExB,OACE,yBAAKE,UAAU,kBACZH,EACAS,EAAQG,KAAI,SAACC,GAAD,OACX,2BAAOC,IAAKD,GACV,2BACEE,KAAMf,EACNC,MAAOY,EACPR,QAASJ,IAAUY,EACnBX,SAAUQ,EACVN,KAAK,UAENS,QFlBX,SAASG,EAAT,GAAmE,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,QAAyC,EACvCD,EAAKE,OAAtBC,EADwD,EACxDA,OAAQC,EADgD,EAChDA,KAEVX,EAAeY,uBACnB,SAACC,GACCN,EAAKP,aAAac,KAAKP,EAAMM,GAC7BL,MAEF,CAACD,EAAKP,eAER,OACE,yBAAKP,UAAU,aACb,kBAAC,EAAD,CACEH,MAAM,qBACNC,MAAOoB,EACPZ,QAAS,CAAC,SAAU,UACpBP,SAAUQ,IAEXW,IAASvB,EAAe2B,QAAU,kBAAC,EAAD,CAAUzB,MAAM,2BAAOC,MAAOmB,EAAQlB,SAAUQ,M,SAvB7EZ,K,gBAAAA,E,iBAAAA,M,SGCP4B,EHkDUC,E,WAhBb,aAAiF,IAArEC,EAAoE,uDAAvDC,IAAkBzB,EAAqC,uDAArB0B,EAAUC,UAAW,yBANhFH,QAMgF,OALhFxB,UAKgF,OAJhF4B,WAIgF,OAHhFC,YAGgF,OAFhFd,YAEgF,OADhFH,cACgF,EAC9EkB,KAAKN,GAAKA,EACVM,KAAK9B,KAAOA,EACZ8B,KAAKF,MAAQ,GACbE,KAAKD,OAAS,GACdC,KAAKf,OAAS,GACde,KAAKlB,SAAWA,E,gDAEdgB,GACF,MAAO,K,mCAEIT,Q,KGvCf,SAASP,EAAT,GAAmE,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,QAAyC,EACvCD,EAAKE,OAAtBC,EADwD,EACxDA,OAAQC,EADgD,EAChDA,KAEVX,EAAeY,uBACnB,SAACC,GACCN,EAAKP,aAAac,KAAKP,EAAMM,GAC7BL,MAEF,CAACD,EAAKP,eAER,OACE,yBAAKP,UAAU,uBACb,kBAAC,EAAD,CACEH,MAAM,qBACNC,MAAOoB,EACPZ,QAAS,CAAC,aAAc,iBAAkB,sBAC1CP,SAAUQ,IAEZ,kBAAC,EAAD,CAAUV,MAAM,qBAAMC,MAAOmB,EAAQlB,SAAUQ,M,SAxBhDgB,K,oBAAAA,E,wBAAAA,E,6BAAAA,M,SCQOI,EDyEGC,E,kDAnDb,WAAYH,GAAc,IAAD,8BACvB,cAAMA,EAAIE,EAAUC,YACfE,OAAS,GACd,EAAKD,MAAQ,GACb,EAAKb,OAAS,CACZC,QAAQ,EACRC,KAAMK,EAAWD,QAGnB,EAAKT,SAAWA,EATO,E,qDAWP,IAAD,EACUkB,KAAKf,OAAdE,GADD,EACPD,OADO,EACCC,MAChB,OACE,yBAAKlB,UAAU,uBACb,kBAAC,EAAD,CACEH,MAAM,qBACNC,MAAOoB,EACPZ,QAAS,CAAC,aAAc,iBAAkB,sBAC1CP,SAAUgC,KAAKxB,kB,0BAKnBsB,GACF,IAAKA,EAAO,MAAO,GACnBE,KAAKF,MAAQA,EACb,IAAIC,EAAS,GACTC,KAAKf,OAAOE,OAASK,EAAWD,OAElCQ,EADYE,KAAKC,MAAMJ,GAGvBC,EADQC,KAAKf,OAAOE,OAASK,EAAWW,OAC/BF,KAAKG,UAAUN,EAAO,KAAM,GAE5BG,KAAKG,UAAUN,GAG1B,OADAE,KAAKD,OAASA,EACPA,I,mCAEIV,GACX,IAAMgB,EAAM,GACO,mBAARhB,IACTgB,EAAInB,OAASG,GAEI,kBAARA,IACTgB,EAAIlB,KAAOE,GAEbW,KAAKf,OAAL,2BAAkBe,KAAKf,QAAWoB,O,GAhDdZ,GEdTa,E,kDAhBb,WAAYZ,GAAc,IAAD,8BACvB,cAAMA,EAAIE,EAAUW,QACfR,OAAS,GACd,EAAKD,MAAQ,GACb,EAAKb,OAAS,GACd,EAAKH,SAAW,kBAAI,sCALG,E,kDASvB,OADAkB,KAAKD,OAASC,KAAKF,MACZE,KAAKD,S,mCAEDV,GACXW,KAAKF,MAAQT,M,GAbQI,GCkBVe,E,kDAjBb,WAAYd,GAAc,IAAD,8BACvB,cAAMA,EAAIE,EAAUa,SACfV,OAAS,GACd,EAAKD,MAAQ,GACb,EAAKb,OAAS,GACd,EAAKH,SAAW,kBAAI,sCALG,E,gDAOrBgB,GAGF,OAFAE,KAAKF,MAAQA,EACbE,KAAKD,OAASC,KAAKF,MACZE,KAAKD,S,mCAEDV,GACXW,KAAKD,OAASV,M,GAdQI,GCsCXiB,E,kDAtCb,WAAYhB,GAAc,IAAD,8BACvB,cAAMA,EAAIE,EAAUc,YACfX,OAAS,GACd,EAAKD,MAAQ,GACb,EAAKb,OAAS,CACZC,QAAQ,EACRC,KAAMvB,EAAe2B,QANA,E,gDAUrBO,GACF,IAAKA,EAAO,MAAO,GACnBE,KAAKF,MAAQA,EACb,IAAIC,EAAS,GACb,GAAIC,KAAKf,OAAOE,OAASvB,EAAe2B,OAAQ,CAC9C,IAAMoB,EAAMC,SAASC,cAAc,OACnCF,EAAIG,UAAYhB,EAChBC,EAASY,EAAII,WAAaJ,EAAIK,aAAe,OACxC,CACL,IAAML,EAAMC,SAASC,cAAc,OACnCF,EAAIM,YAAYL,SAASM,eAAepB,IACxCC,EAAQY,EAAIG,UAGd,OADAd,KAAKD,OAASA,EACPA,I,mCAEIV,GACX,IAAMgB,EAAM,GACO,mBAARhB,IACTgB,EAAInB,OAASG,GAEI,kBAARA,IACTgB,EAAIlB,KAAOE,GAEbW,KAAKf,OAAL,2BAAkBe,KAAKf,QAAWoB,O,GAnCdZ,GC+CT0B,E,kDA5Cb,WAAYzB,GAAc,IAAD,8BACvB,cAAMA,EAAIE,EAAUuB,oBACfpB,OAAS,GACd,EAAKD,MAAQ,GACb,EAAKb,OAAS,CACZC,QAAQ,EACRC,KAAMvB,EAAe2B,QANA,E,gDAUrBO,GACF,IAAKA,EAAO,MAAO,GACnBE,KAAKF,MAAQA,EACb,IAAIC,EAAS,GACb,GAAIC,KAAKf,OAAOE,OAASvB,EAAe2B,OACtC,GAAGS,KAAKf,OAAOC,OAAQ,CAErB,IAAIkC,EADJpB,KAAKD,OAASC,KAAKF,MAEnB,GACEsB,EAAMpB,KAAKD,OACXC,KAAKD,OAASsB,mBAAmBD,SAC5BpB,KAAKD,SAAWqB,GACvBrB,EAASC,KAAKD,YAEdA,EAAUsB,mBAAmBrB,KAAKF,YAGpCC,EAAUuB,mBAAmBtB,KAAKF,OAGpC,OADAE,KAAKD,OAASA,EACPA,I,mCAEIV,GACX,IAAMgB,EAAM,GACO,mBAARhB,IACTgB,EAAInB,OAASG,GAEI,kBAARA,IACTgB,EAAIlB,KAAOE,GAEbW,KAAKf,OAAL,2BAAkBe,KAAKf,QAAWoB,O,GAzCNZ,I,SJSpBG,K,sBAAAA,E,sBAAAA,E,sCAAAA,E,oBAAAA,E,cAAAA,E,iBAAAA,M,KAqBL,IAAM2B,EAAW,IAAIC,IAC5BD,EAASE,IAAI7B,EAAUC,UAAWA,GAClC0B,EAASE,IAAI7B,EAAUW,MAAOD,GAC9BiB,EAASE,IAAI7B,EAAUa,OAAQD,GAC/Be,EAASE,IAAI7B,EAAUc,UAAWA,GAClCa,EAASE,IAAI7B,EAAUuB,kBAAmBA,G,YK1BnC,SAASxB,IACd,OAAO+B,cA6DMC,MAhDf,YAA+E,IAA/DzD,EAA8D,EAA9DA,KAAMwB,EAAwD,EAAxDA,GAAIkC,EAAoD,EAApDA,QAASC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,SAW/CC,EArBR,SAA6B9D,GAC3B,OAAOA,IAAS0B,EAAUa,QAAUvC,IAAS0B,EAAUW,MAoB3B0B,CAAoB/D,GAChD,OACE,kBAAC,IAAD,CACEgE,YAAaxC,EACbmC,MAAOA,EACPM,eAAgBH,IAEf,SAACI,EAAUC,GACV,OACE,oCACE,uCACEC,IAAKF,EAASG,SACdtE,UAAW,QAAU8D,EAAW,gBAAkB,IAClDS,UAAS9C,EACTkC,QAASA,GACLQ,EAASK,eACTL,EAASM,gBANf,CAOEC,MAAK,2BACAP,EAASK,eAAeE,QAnCjBC,EAuCUP,EAASO,WAtCpCA,EACH,CAAEC,OAAQ,qBAAsBC,gBAAiB,sBACjD,CAAEC,YAAa,aAuCN7E,GAEF4D,GAAeO,EAASO,YACvB,yBAAK3E,UAAU,qBAAqBC,IA7ClD,IAA0B0E,MCUbI,GArBLpD,EAAUuB,kBAOVvB,EAAUC,UAQVD,EAAUc,UAME,CAClBd,EAAUuB,kBACVvB,EAAUc,UACVd,EAAUC,YAsBGoD,ICjCVC,EDiCUD,EAnBf,WACE,OACE,kBAAC,IAAD,CAAWE,YEvCiB,eFuCcC,gBAAgB,IACvD,SAAChB,EAAUC,GAAX,OACC,uCACEpE,UAAU,WACNmE,EAASiB,eAFf,CAGEf,IAAKF,EAASG,WAEbS,EAAKtE,KAAI,SAACK,EAAM8C,GAAP,OACR,kBAAC,EAAD,CAAMjD,IAAKG,EAAM+C,aAAW,EAACpC,GAAI,OAASmC,EAAO3D,KAAMa,EAAM8C,MAAOA,OAErEO,EAASkB,kB,SC1BfJ,K,iBAAAA,E,cAAAA,E,mBAAAA,M,KA6FUK,MA5Ef,YAA2F,IAAvEC,EAAsE,EAAtEA,YAAaC,EAAyD,EAAzDA,SAAUC,EAA+C,EAA/CA,gBAAiBC,EAA8B,EAA9BA,YAoBpDC,EAAc,WAIlB,IAHA,IAAI7D,EAAS,GAGJ8D,EAAI,EAAGA,EAAIJ,EAASK,OAAQD,IAAK,CACxC,IAAM9E,EAAO0E,EAASI,GACtB,IACE9D,EAAShB,EAAKgF,IAAIhE,GAClB,MAAOiE,GACPjF,EAAKgB,OAASiE,EAAIC,QAClB,OAGJP,KAEIQ,EAAkB,SAACzF,GACvB,IAAMJ,EAASI,EAAMJ,OACfU,EAAO0E,EAASU,MACpB,SAACxF,GAAD,OAAUA,EAAKe,KAAOrB,EAAO+F,aAAa,cAE5CZ,EAAYzE,IAEd,OACE,kBAAC,IAAD,CAAWoE,YCpFiB,kBDqFzB,SAACf,EAAUC,GAAX,OACC,uCAAKpE,UAAU,YAAemE,EAASiB,eAAvC,CACAV,MAAO,CAAEE,OAAQR,EAASgC,eAAiB,aAAe,IAC1D/B,IAAKF,EAASG,WACZ,yBAAKtE,UAAU,wBACf,yBAAKA,UAAU,kBACb,6BACE,4BAAQ2D,QAASgC,GAAjB,UAIF,yBACE3F,UAAU,sBAGTwF,EAAS/E,KAAI,SAACK,EAAM8C,GAAP,OACZ,kBAAC,EAAD,eACEA,MAAOA,EACPjD,IAAKG,EAAKW,IACNX,EAHN,CAIEgD,SAAU4B,GAAeA,EAAYjE,KAAOX,EAAKW,GACjDkC,QAASsC,eEjDZI,MArDf,YAMI,IALFvF,EAKC,EALDA,KAKC,KAJDf,SAK4BuG,mBAAS,IADpC,mBACcC,GADd,WAEKxF,EAAU,WACdwF,EAAUC,KAAKC,WAQjB,IAAK3F,EACH,OAAO,KAET,IAAM4F,EAAK5F,EAAKD,SAChB,OACE,yBAAKb,UAAU,SACZc,EAAKb,OAAS0B,EAAUW,OAASxB,EAAKb,OAAS0B,EAAUa,OACxD,yBAAKxC,UAAU,aACb,kBAAC0G,EAAD,CAAI5F,KAAMA,EAAMC,QAASA,KAEzB,KACHD,EAAKb,OAAS0B,EAAUW,OACvB,yBAAKtC,UAAU,aACb,qCACA,8BACE2G,YAAU,QACV7G,MAAOgB,EAAKe,MACZ9B,SAvBW,SAACS,GAEpBM,EAAKP,aAAaC,EAAMJ,OAAON,OAC/BiB,QAwBGD,EAAKb,OAAS0B,EAAUW,OACvB,yBAAKtC,UAAU,cACb,sCACA,8BACE2G,YAAU,SACVC,UAAQ,EACR9G,MAAOgB,EAAKgB,OACZ/B,SAAU,SAACS,GAAD,OAAYM,EAAKgB,OAAStB,EAAMJ,OAAON,YC5C9C+G,MAJR,WACL,OAAO,4BAAQ7G,UAAU,QAAlB,eCSHqC,EAAaiB,EAASwD,IAAInF,EAAUW,OACpCC,EAAce,EAASwD,IAAInF,EAAUa,QACrCuE,EAAc,CAAC,IAAI1E,EAAc,IAAIE,GAkE5ByE,MAxDf,WAAgB,IAAD,EACyBV,mBAAgB,MADzC,mBACNZ,EADM,KACOuB,EADP,OAEmCX,mBAASS,GAF5C,mBAENG,EAFM,KAEYC,EAFZ,KAmCb,OACE,yBAAKnH,UAAU,OACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,QACd,kBAAC,IAAD,CAAiBoH,UA9BD,SAACC,GACrB,GAAKA,EAAOC,aHjCgB,kBGqCzBD,EAAOC,YAAYpC,YACpB,GHrC0B,iBGqCvBmC,EAAOE,OAAOrC,YAAkC,CACjD,IAAMsC,EAAczC,EAAKsC,EAAOE,OAAO3D,OACjCpC,EAAQ8B,EAASwD,IAAIU,GAC3B,GAAGhG,EAAO,CACR,IAAMiG,EAAQ,IAAIjG,EACZkG,EAAcC,MAAMC,KAAKV,GAC/BQ,EAAYG,QAAQ,EAAG,EAAGJ,GAC1BN,EAAoBO,QAGjB,CACL,IAAMA,EAAcC,MAAMC,KAAKV,GAD1B,EAEaQ,EAAYG,OAAOR,EAAOE,OAAO3D,MAAO,GAAnDkE,EAFF,oBAGLJ,EAAYG,OAAOR,EAAOC,YAAY1D,MAAO,EAAGkE,GAChDX,EAAoBO,MAWlB,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEhC,YAAaA,EACbH,YAxCc,SAACzE,GACvBmG,EAAenG,IAwCP0E,SAAU0B,EACVzB,gBAAiB,kBACf0B,EAAoBD,EAAiBzG,KAAI,SAACC,GAAD,OAAUA,UAIzD,kBAAC,EAAD,CAAOI,KAAM4E,EAAa3F,SA5CX,SAACe,GACpBmG,EAAenG,SC1BnBiH,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtF,SAASuF,eAAe,W","file":"static/js/main.0f27a3e0.chunk.js","sourcesContent":["import React, { ReactNode, useCallback } from 'react';\nimport { IoType, CodecType } from '.';\nimport { generateNodeId } from '../components/Node';\nimport { Radiobox, Checkbox } from '../components';\n\nexport enum BaseDecodeType {\n  Decode = 'decode',\n  Encode = 'encode',\n}\n\nfunction ConfigUi({node, refresh}: {node:Codec,refresh:Function}) {\n  const { isLoop, ende } = node.config;\n  \n  const handleChange = useCallback(\n    (val)=> {\n      node.handleChange.call(node, val);\n      refresh();\n    },\n    [node.handleChange],\n  )\n  return (\n    <div className=\"JsonCodec\">\n      <Radiobox\n        label=\"编解码\"\n        value={ende}\n        options={['decode', 'encode']}\n        onChange={handleChange}\n      />\n      {ende === BaseDecodeType.Decode && <Checkbox label=\"循环解码\" value={isLoop} onChange={handleChange} />}\n    </div>\n  );\n}\n\nclass Codec {\n  id: string;\n  type: CodecType;\n  input: IoType;\n  output: IoType;\n  config: any;\n  ConfigUi: (props:any)=>JSX.Element;\n  constructor(id: string = generateNodeId(), type: CodecType=CodecType.JsonCodec) {\n    this.id = id;\n    this.type = type;\n    this.input = '';\n    this.output = '';\n    this.config = {};\n    this.ConfigUi = ConfigUi;\n  }\n  run(input?: IoType){\n    return '' as IoType;\n  };\n  handleChange(val:any) {\n\n  }\n}\n\nexport default Codec;\n","import React from 'react';\n\nconst Checkbox = ({\n  label,\n  value,\n  onChange\n}: {\n  label: string;\n  value: boolean;\n  onChange: (value: boolean) => void;\n}) => {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(e.target.checked);\n  };\n  return (\n    <label className=\"NodeConfigProp\">\n      {label}\n      <input type=\"checkbox\" checked={value} onChange={handleChange} />\n    </label>\n  );\n};\n\nexport default Checkbox;","import React from 'react';\n\nconst Radiobox = ({\n  label,\n  value,\n  options,\n  onChange\n}: {\n  label: string;\n  value: string;\n  options: string[];\n  onChange: (value: string) => void;\n}) => {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value);\n  };\n  return (\n    <div className=\"NodeConfigProp\">\n      {label}\n      {options.map((item) => (\n        <label key={item}>\n          <input\n            name={label}\n            value={item}\n            checked={value === item}\n            onChange={handleChange}\n            type=\"radio\"\n          />\n          {item}\n        </label>\n      ))}\n    </div>\n  );\n};\n\nexport default Radiobox;","import React, { useCallback } from 'react';\nimport Codec from './Codec';\nimport { Checkbox } from '../components';\nimport { Radiobox } from '../components';\nimport { IoType, CodecType } from '.';\n\nenum DecodeType {\n  Decode = 'JSON.parse',\n  Encode = 'JSON.stringify',\n  Format = '格式化'\n}\n\nfunction ConfigUi({node, refresh}: {node:Codec,refresh:Function}) {\n  const { isLoop, ende } = node.config;\n  \n  const handleChange = useCallback(\n    (val)=> {\n      node.handleChange.call(node, val);\n      refresh();\n    },\n    [node.handleChange],\n  )\n  return (\n    <div className=\"JsonCodec NodeState\">\n      <Radiobox\n        label=\"编解码\"\n        value={ende}\n        options={['JSON.parse', 'JSON.stringify', '格式化']}\n        onChange={handleChange}\n      />\n      <Checkbox label=\"编解码\" value={isLoop} onChange={handleChange} />\n    </div>\n  );\n}\n\nclass JsonCodec extends Codec {\n  constructor(id?: string) {\n    super(id, CodecType.JsonCodec);\n    this.output = '';\n    this.input = '';\n    this.config = {\n      isLoop: false,\n      ende: DecodeType.Decode\n    };\n\n    this.ConfigUi = ConfigUi;\n  }\n  private render() {\n    const { isLoop, ende } = this.config;\n    return (\n      <div className=\"JsonCodec NodeState\">\n        <Radiobox\n          label=\"编解码\"\n          value={ende}\n          options={['JSON.parse', 'JSON.stringify', '格式化']}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n  run(input: IoType) {\n    if (!input) return '';\n    this.input = input;\n    let output = '';\n    if (this.config.ende === DecodeType.Decode) {\n      const str = JSON.parse(input);\n      output = str as string;\n    } else if(this.config.ende === DecodeType.Format) {\n      output = JSON.stringify(input, null, 2);\n    } else {\n      output = JSON.stringify(input);\n    }\n    this.output = output;\n    return output;\n  }\n  handleChange(val: any) {\n    const res = {} as any;\n    if (typeof val === 'boolean') {\n      res.isLoop = val;\n    }\n    if (typeof val === 'string') {\n      res.ende = val;\n    }\n    this.config = {...this.config, ...res}\n  }\n}\n\nexport default JsonCodec;\n","/*\n1. encodeURIComponent\n2. JSON.stringify/parse\n3. HTMLEncode\n4. Base64\n */\n\nimport JsonCodec from \"./JsonCodec\";\nimport Codec from \"./Codec\";\nimport InputCodec from \"./InputCodec\";\nimport OutputCodec from \"./OutputCodec\";\nimport HtmlCodec from './HtmlCodec'\nimport UrlComponentCodec from './UrlComponentCodec'\n\nexport enum CodecType {\n  HtmlCodec = 'HtmlCodec',\n  JsonCodec = 'JsonCodec',\n  UrlComponentCodec = 'UrlComponentCodec',\n  UrlCodec = 'UrlCodec',\n  Input = 'Input',\n  Output = 'Output',\n}\n\nexport type IoType = string;\n\n\n\nfunction loop<T>(fn: Function, input: T) {\n  let result = input;\n  do {\n    result = loop(fn, result);\n  } while (result !== input);\n  return result;\n}\n\nexport const CodecMap = new Map<CodecType, typeof Codec>();\nCodecMap.set(CodecType.JsonCodec, JsonCodec);\nCodecMap.set(CodecType.Input, InputCodec);\nCodecMap.set(CodecType.Output, OutputCodec);\nCodecMap.set(CodecType.HtmlCodec, HtmlCodec);\nCodecMap.set(CodecType.UrlComponentCodec, UrlComponentCodec);\n","import Codec from './Codec';\nimport { CodecType, IoType } from '.';\nimport React from 'react';\n\nclass InputCodec extends Codec {\n  constructor(id?: string) {\n    super(id, CodecType.Input);\n    this.output = '';\n    this.input = '';\n    this.config = {};\n    this.ConfigUi = ()=><></>;\n  }\n  run() {\n    this.output = this.input;\n    return this.output;\n  }\n  handleChange(val: IoType) {\n    this.input = val;\n  }\n}\n\nexport default InputCodec;\n","import Codec from './Codec';\nimport { CodecType, IoType } from '.';\nimport React from 'react';\n\nclass OutputCodec extends Codec {\n  constructor(id?: string) {\n    super(id, CodecType.Output);\n    this.output = '';\n    this.input = '';\n    this.config = {};\n    this.ConfigUi = ()=><></>;\n  }\n  run(input:string) {\n    this.input = input;\n    this.output = this.input;\n    return this.output;\n  }\n  handleChange(val: IoType) {\n    this.output = val;\n  }\n}\n\nexport default OutputCodec;\n","import Codec, { BaseDecodeType } from './Codec';\nimport { IoType, CodecType } from '.';\n\nclass HtmlCodec extends Codec {\n  constructor(id?: string) {\n    super(id, CodecType.HtmlCodec);\n    this.output = '';\n    this.input = '';\n    this.config = {\n      isLoop: false,\n      ende: BaseDecodeType.Decode\n    };\n\n  }\n  run(input: IoType) {\n    if (!input) return '';\n    this.input = input;\n    let output = '';\n    if (this.config.ende === BaseDecodeType.Decode) {\n      const div = document.createElement('div');\n      div.innerHTML = input;\n      output = div.innerText || div.textContent || '';\n    } else {\n      const div = document.createElement('div');\n      div.appendChild(document.createTextNode(input));\n      output =div.innerHTML;\n    }\n    this.output = output;\n    return output;\n  }\n  handleChange(val: any) {\n    const res = {} as any;\n    if (typeof val === 'boolean') {\n      res.isLoop = val;\n    }\n    if (typeof val === 'string') {\n      res.ende = val;\n    }\n    this.config = {...this.config, ...res}\n  }\n}\n\nexport default HtmlCodec;\n","import Codec, { BaseDecodeType } from './Codec';\nimport { IoType, CodecType } from '.';\n\n\n\nclass UrlComponentCodec extends Codec {\n  constructor(id?: string) {\n    super(id, CodecType.UrlComponentCodec);\n    this.output = '';\n    this.input = '';\n    this.config = {\n      isLoop: false,\n      ende: BaseDecodeType.Decode\n    };\n  }\n\n  run(input: IoType) {\n    if (!input) return '';\n    this.input = input;\n    let output = '';\n    if (this.config.ende === BaseDecodeType.Decode) {\n      if(this.config.isLoop) {\n        this.output = this.input;\n        let pre;\n        do{\n          pre = this.output;\n          this.output = decodeURIComponent(pre)\n        }while(this.output === pre)\n        output = this.output;\n      } else {\n        output =  decodeURIComponent(this.input);\n      }\n    } else {\n      output =  encodeURIComponent(this.input);\n    }\n    this.output = output;\n    return output;\n  }\n  handleChange(val: any) {\n    const res = {} as any;\n    if (typeof val === 'boolean') {\n      res.isLoop = val;\n    }\n    if (typeof val === 'string') {\n      res.ende = val;\n    }\n    this.config = {...this.config, ...res}\n  }\n}\n\nexport default UrlComponentCodec;\n","import React, { MouseEventHandler } from 'react';\nimport { Draggable, DraggableProvided } from 'react-beautiful-dnd';\nimport { CodecType } from '../codec';\nimport { nanoid } from 'nanoid';\n\nexport interface NodeProps {\n  type: CodecType;\n  id: string;\n  index: number;\n  shouldClone?: boolean;\n  onClick?: MouseEventHandler;\n  isActive?: boolean;\n}\n\nexport function generateNodeId() {\n  return nanoid();\n}\n\nfunction isForbiddenDragging(type: CodecType) {\n  return type === CodecType.Output || type === CodecType.Input;\n}\n\nfunction getDraggingStyle(isDragging: boolean) {\n  return isDragging\n    ? { border: '1px dashed #3cc520', backgroundColor: 'hsl(110, 72%, 98%)' }\n    : { borderStyle: 'solid' };\n}\n\nfunction Node({ type, id, onClick, index, shouldClone, isActive }: NodeProps) {\n  // const [{ isDragging }, drag, preview] = useDrag({\n  //   item: { type, id: id||generateNodeId()},\n  //   collect: monitor => {\n  //     const item = monitor.getItem();\n  //     return {\n  //       isDragging: !!monitor.isDragging(),\n  //       id: item && item.id\n  //     }\n  //   }\n  // });\n  const isDraggingForbidden = isForbiddenDragging(type);\n  return (\n    <Draggable\n      draggableId={id}\n      index={index}\n      isDragDisabled={isDraggingForbidden}\n    >\n      {(provided, snapshot) => {\n        return (\n          <>\n            <div\n              ref={provided.innerRef}\n              className={'Node' + (isActive ? ' Node--active' : '')}\n              data-id={id}\n              onClick={onClick}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              style={{\n                ...provided.draggableProps.style,\n                // transform: isDraggingForbidden\n                //   ? 'none'\n                //   : provided.draggableProps.style?.transform,\n                ...getDraggingStyle(snapshot.isDragging)\n              }}\n            >\n              {type}\n            </div>\n            {shouldClone && snapshot.isDragging && (\n              <div className=\"Node Node--copied\">{type}</div>\n            )}\n          </>\n        );\n      }}\n    </Draggable>\n  );\n}\n\nexport default Node;\n","import React from 'react';\nimport Node from './Node';\nimport { CodecType } from '../codec';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport { DROP_NODE_LIB_ID } from '../utils';\n\nconst ConfigProp = {\n  EnDe: { label: '编解码' }\n};\n\nexport const UrlComponentCodecNode = {\n  type: CodecType.UrlComponentCodec,\n  config: {\n    isDecode: false,\n    isLoop: true\n  }\n};\nexport const JsonCodecNode = {\n  type: CodecType.JsonCodec,\n  config: {\n    isDecode: false,\n    isLoop: false,\n    isFormat: true\n  }\n};\nexport const HtmlCodecNode = {\n  type: CodecType.HtmlCodec,\n  config: {\n    isDecode: false,\n    isLoop: false\n  }\n};\nexport const LIBS = [\n  CodecType.UrlComponentCodec,\n  CodecType.HtmlCodec,\n  CodecType.JsonCodec\n];\n\nfunction NodeLib() {\n  return (\n    <Droppable droppableId={DROP_NODE_LIB_ID} isDropDisabled={true}>\n      {(provided, snapshot) => (\n        <div\n          className=\"NodeLib\"\n          {...provided.droppableProps}\n          ref={provided.innerRef}\n        >\n          {LIBS.map((node, index) => (\n            <Node key={node} shouldClone id={'LIB-' + index} type={node} index={index} />\n          ))}\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  );\n}\n\nexport default NodeLib;\n","import React, { useState, MouseEvent } from 'react';\nimport Node, { generateNodeId, NodeProps } from './Node';\nimport { LIBS } from './NodeLib';\nimport { CodecType, IoType, CodecMap } from '../codec';\nimport Codec from '../codec/Codec';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { DROP_WORKFLOW_ID } from '../utils';\n\ntype StatusType = {\n  flag: NodeStatusType;\n  message: string;\n  stack?: string;\n};\n\nexport interface NodeType {\n  type: CodecType;\n  id?: string;\n  input?: IoType;\n  config?: { [key: string]: any };\n  output?: IoType;\n  status?: StatusType;\n  ConfigUi: Function;\n}\n\nenum NodeStatusType {\n  NotRun = 'not-run',\n  Error = 'error',\n  Success = 'success'\n}\n\ntype WorkflowProps = {\n  workflow: Codec[];\n  onNodeFocus: (node: Codec) => void;\n  refreshWorkflow: () => void;\n  focusedNode: Codec\n};\n\nfunction deepClone(data: any) {\n  return JSON.parse(JSON.stringify(data));\n}\n\nfunction Workflow({ onNodeFocus, workflow, refreshWorkflow, focusedNode }: WorkflowProps) {\n  // const [collectedProps, drop] = useDrop({\n  //   accept: LIBS.map((type) => type),\n  //   drop(item, monitor) {\n  //     const id = monitor.getItem().id;\n  //     if (!workflow.find((item) => item.id === id)) {\n  //       const type = item.type as CodecType;\n  //       const Codec = CodecMap.get(type);\n  //       if (Codec) {\n  //         const codec = new Codec();\n\n  //         workflow.splice(-1, 0, codec);\n  //         setWorkflow(workflow.map((item) => item));\n  //       }\n  //       // Codec && setWorkflow(\n  //       //   workflow.concat(new Codec())\n  //       // );\n  //     }\n  //   }\n  // });\n  const handleStart = () => {\n    let output = '';\n    let errorIndex = -1;\n    const newWorkflow: Codec[] = [];\n    for (let i = 0; i < workflow.length; i++) {\n      const node = workflow[i];\n      try {\n        output = node.run(output);\n      } catch (err) {\n        node.output = err.message;\n        break;\n      }\n    }\n    refreshWorkflow();\n  };\n  const handleFocusNode = (event: MouseEvent) => {\n    const target = event.target as HTMLDivElement;\n    const node = workflow.find(\n      (item) => item.id === target.getAttribute('data-id')\n    )!;\n    onNodeFocus(node);\n  };\n  return (\n    <Droppable droppableId={DROP_WORKFLOW_ID}>\n      {(provided, snapshot) => (\n        <div className=\"Workflow\" {...provided.droppableProps}\n        style={{ border: snapshot.isDraggingOver ? '1px dashed' : '' }}\n        ref={provided.innerRef}>\n          <div className=\"Workflow--Guideline\"></div>\n          <div className=\"Workflow--Body\">\n            <div>\n              <button onClick={handleStart}>start</button>\n              {/* <button onClick={handleStart}>start from error node</button> */}\n            </div>\n\n            <div\n              className=\"Workflow--NodeList\"\n              \n            >\n              {workflow.map((node, index) => (\n                <Node\n                  index={index}\n                  key={node.id}\n                  {...node}\n                  isActive={focusedNode && focusedNode.id === node.id}\n                  onClick={handleFocusNode}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </Droppable>\n  );\n}\n\nexport default Workflow;\n","export const DROP_WORKFLOW_ID = 'drop-workflow';\nexport const DROP_NODE_LIB_ID = 'drop-nodelib';","import React, { useState } from 'react';\nimport { CodecType } from '../codec';\nimport Codec from '../codec/Codec';\n\nfunction State({\n  node,\n  onChange\n}: {\n  node: Codec;\n  onChange: (node: Codec) => void;\n}) {\n  const [theKey, setTheKey] = useState(0);\n  const refresh = () => {\n    setTheKey(Math.random())\n  }\n  const handleChange = (event:any) => {\n    //@ts-ignore\n    node.handleChange(event.target.value);\n    refresh()\n  }\n\n  if (!node) {\n    return null;\n  }\n  const Ui = node.ConfigUi;\n  return (\n    <div className=\"State\">\n      {node.type !== CodecType.Input && node.type !== CodecType.Output ? (\n        <div className=\"NodeState\">\n          <Ui node={node} refresh={refresh}/>\n        </div>\n      ) : null}\n      {node.type === CodecType.Input && (\n        <div className=\"NodeInput\">\n          <h2>Input</h2>\n          <textarea\n            data-type=\"input\"\n            value={node.input}\n            onChange={handleChange}\n          ></textarea>\n        </div>\n      )}\n      {node.type !== CodecType.Input && (\n        <div className=\"NodeOutput\">\n          <h2>Output</h2>\n          <textarea\n            data-type=\"output\"\n            readOnly\n            value={node.output}\n            onChange={(event) => (node.output = event.target.value)}\n          ></textarea>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default State;\n","import React from 'react';\nexport function Head () {\n  return <header className=\"Head\">flow-codec</header>\n}\n\nexport default Head;","import React, { useState } from 'react';\nimport './App.scss';\nimport NodeLib, { LIBS } from './components/NodeLib';\nimport Workflow, { NodeType } from './components/Workflow';\nimport State from './components/State';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport Head from './components/Head';\nimport Codec from './codec/Codec';\nimport { CodecMap, CodecType } from './codec';\nimport { DROP_WORKFLOW_ID, DROP_NODE_LIB_ID } from './utils';\n\nconst InputCodec = CodecMap.get(CodecType.Input)!;\nconst OutputCodec = CodecMap.get(CodecType.Output)!;\nconst initialNode = [new InputCodec(), new OutputCodec()];\n\nconst reorder = (list:Codec[], startIndex:number, endIndex:number) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nfunction App() {\n  const [focusedNode, setFocusedNode] = useState<Codec>(null!);\n  const [workflowNodeList, setWorkflowNodeList] = useState(initialNode);\n  const handleFocusNode = (node: Codec) => {\n    setFocusedNode(node);\n  };\n  const handleChange = (node: Codec) => {\n    setFocusedNode(node);\n  };\n  const handleDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n    // add\n    if(result.destination.droppableId === DROP_WORKFLOW_ID) {\n      if(result.source.droppableId === DROP_NODE_LIB_ID) {\n        const libNodeType = LIBS[result.source.index]\n        const Codec = CodecMap.get(libNodeType);\n        if(Codec) {\n          const codec = new Codec();\n          const newNodeList = Array.from(workflowNodeList);\n          newNodeList.splice(-1, 0, codec);\n          setWorkflowNodeList(newNodeList);\n        }\n        \n      } else {\n        const newNodeList = Array.from(workflowNodeList);\n        const [removed] = newNodeList.splice(result.source.index, 1);\n        newNodeList.splice(result.destination.index, 0, removed);\n        setWorkflowNodeList(newNodeList);\n      }\n    }\n    // reorder\n  };\n\n  return (\n    <div className=\"App\">\n      <Head></Head>\n      <main className=\"Body\">\n        <DragDropContext onDragEnd={handleDragEnd}>\n          <NodeLib />\n          <Workflow\n            focusedNode={focusedNode}\n            onNodeFocus={handleFocusNode}\n            workflow={workflowNodeList}\n            refreshWorkflow={() =>\n              setWorkflowNodeList(workflowNodeList.map((item) => item))\n            }\n          />\n        </DragDropContext>\n        <State node={focusedNode} onChange={handleChange} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}